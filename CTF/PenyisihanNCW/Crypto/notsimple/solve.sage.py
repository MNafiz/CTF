

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_17 = Integer(17); _sage_const_16 = Integer(16); _sage_const_156 = Integer(156); _sage_const_128 = Integer(128); _sage_const_32 = Integer(32); _sage_const_256 = Integer(256); _sage_const_512 = Integer(512); _sage_const_1024 = Integer(1024); _sage_const_4 = Integer(4); _sage_const_3 = Integer(3); _sage_const_7 = Integer(7); _sage_const_5 = Integer(5); _sage_const_6 = Integer(6); _sage_const_9 = Integer(9)
from sage.all import *
from pwn import *
from randcrack import RandCrack
from Crypto.Util.number import *

def gcd(a, b): 
    while b:
        a, b = b, a % b
    return a.monic()

def franklinreiter(C1, C2, e, N, a, b):
    P = PolynomialRing(Zmod(N), names=('X',)); (X,) = P._first_ngens(1)
    g1 = (X + a)**e - C1
    g2 = (X + b)**e - C2
    result = -gcd(g1, g2).coefficients()[_sage_const_0 ]
    return result

rc = RandCrack()

NC = "nc 103.145.226.209 1928".split()

r = remote(NC[_sage_const_1 ], NC[_sage_const_2 ])

# r = process(["python3", "notsimple.py"])
e = _sage_const_17 

def goto(n):
    r.sendlineafter(b">> ", str(n).encode())

def wadidawe():
    goto(_sage_const_1 )
    r.recvuntil(b"wadidaw = ")
    result = int(r.recvline(_sage_const_0 ), _sage_const_16 )
    # r.recvuntil(b"wadidaw_asli = ")
    # result_list = eval(r.recvline(0))
    return result

r.sendlineafter(b"e = ", str(e).encode())

# hasil = []
# res1, res2 = wadidaw()
# print(hex(res1))
# mask = 128
# for j in range(4):
#     res1_temp = res1 >> mask
#     hasil.append(res1_temp % (1 << 32))
#     mask *= 2

# print(hasil)
# print(res2)
# print(hex(res1))

for i in range(_sage_const_156 ):
    print(i+_sage_const_1 )
    res1 = wadidawe()
    rc.submit((res1 >> _sage_const_128 ) % (_sage_const_2 **_sage_const_32 ))
    rc.submit((res1 >> _sage_const_256 ) % (_sage_const_2 **_sage_const_32 ))
    rc.submit((res1 >> _sage_const_512 ) % (_sage_const_2 **_sage_const_32 ))
    rc.submit((res1 >> _sage_const_1024 ) % (_sage_const_2 **_sage_const_32 ))


def wow(rc):
    wow = [rc.predict_getrandbits(_sage_const_32 ) << (_sage_const_128 *pow(_sage_const_2 ,i)) for i in range(_sage_const_0 , _sage_const_4 )]
    wadidaw = _sage_const_0 
    for i in wow:
        wadidaw |= i
    wiw = [wow[i] >> (_sage_const_128 *pow(_sage_const_2 ,i)) for i in range(_sage_const_0 , _sage_const_4 )]
    return wadidaw




print(wow(rc) == wadidawe())

goto(_sage_const_2 )

r.recvuntil(b"c = ")
c1 = int(r.recvline(_sage_const_0 ))
r.recvuntil(b"n = ")
n = int(r.recvline(_sage_const_0 ))
a = wow(rc)

goto(_sage_const_2 )
r.recvuntil(b"c = ")
c2 = int(r.recvline(_sage_const_0 ))
b = wow(rc)


res = franklinreiter(c1, c2, e, n, a, b)
m = long_to_bytes(int(res))
print(m)
print(e)
print(n)

opr1, opr2 = m.split(b"bebek")
opr1, opr2 = bytes_to_long(opr1), bytes_to_long(opr2)


goto(_sage_const_3 )

r.sendlineafter(b"opr1 = ", str(opr1).encode())
r.sendlineafter(b"opr2 = ", str(opr2).encode())

r.recvline(_sage_const_0 )

r.recvuntil(b"n = ")
n = int(r.recvline(_sage_const_0 ))

r.recvuntil(b"e = ")
e = int(r.recvline(_sage_const_0 ))

r.recvuntil(b"c = ")
c = int(r.recvline(_sage_const_0 ))

p = GCD((pow(opr1, _sage_const_7 , n) * opr2**_sage_const_5 ) - _sage_const_1 , n)
q = n//p
print(p*q == n)
print(p != n)



c = c * pow(opr1, _sage_const_6 , n) * pow(opr2, _sage_const_9 , n) % n
phi = (p - _sage_const_1 ) * (q - _sage_const_1 )
assert phi % _sage_const_3  != _sage_const_0 

d = inverse(e*_sage_const_3  , phi)

omo = pow(c, d, n)
m = omo * pow(opr1, -_sage_const_1 , n) * pow(opr2, -_sage_const_1 , n) % n

kode = long_to_bytes(int(m))

print(kode)

r.sendline(kode)

r.interactive()

