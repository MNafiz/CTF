

# This file was *autogenerated* from the file solver.sage
from sage.all_cmdline import *   # import sage library

_sage_const_6 = Integer(6); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_1000 = Integer(1000); _sage_const_4000 = Integer(4000); _sage_const_1013 = Integer(1013); _sage_const_8 = Integer(8)
from pwn import *
from Crypto.Util.number import *
from sage.all import *

while True:
    r = remote("ctf-gemastik.ub.ac.id", "10001")

    r.recvuntil(b"values:\n")

    for i in range(_sage_const_6 ):
        exec(r.recvline(_sage_const_0 ))



    divisor = GCD(_sage_const_4 ,modd-_sage_const_1 )
    if pow(_sage_const_3 ,(modd-_sage_const_1 )//divisor,modd) != _sage_const_1 :
        r.close()
        continue
    
    d = inverse(_sage_const_4 ,(modd-_sage_const_1 )//divisor)


    hidden_val = Zmod(modd)(hint_2)**d
    print("bsoa", hidden_val)
    hidden_val = int(hidden_val)
    print("bsoa", hidden_val)


    rand_1_temp = hidden_val % n
    for i in range(_sage_const_1000 ,_sage_const_4000 ):
        temp = n*i + rand_1_temp
        z3 = (hidden_val - temp)
        if z3 % n == _sage_const_0 :
            z3 //= n
            if hidden_val == (n*z3) + temp and isPrime(z3) and temp.bit_length() == (modd.bit_length() - _sage_const_1013 ):
                print("dapet",i)
                


                print(n*z3 + temp == hidden_val)
                # scale_v = 1
                # mat = Matrix(ZZ,[
                #     [scale_v,0,0, z3**8],
                #     [0,scale_v,0, n*0x1337],
                #     [0,0,scale_v, -hint_1],
                # ])

                # mat = mat.LLL()

                # k = abs(mat[0][2] // scale_v)
                # print(k)

                # print(n)


                print(hint_1 > z3**_sage_const_8 )

    r.interactive()

