

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_8 = Integer(8); _sage_const_128 = Integer(128); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3); _sage_const_4 = Integer(4); _sage_const_6 = Integer(6); _sage_const_32 = Integer(32); _sage_const_9 = Integer(9); _sage_const_16 = Integer(16); _sage_const_256 = Integer(256); _sage_const_30 = Integer(30)
from sage.all import *
from pwn import *
from aes import AES
import os

do_nothing = lambda *x: None

def bytes2mat(b):
    a = []
    for i in b:
        tmp = bin(i)[_sage_const_2 :].zfill(_sage_const_8 )
        for j in tmp:
            a.append(int(j))
    return Matrix(GF(_sage_const_2 ), a)

def mat2bytes(m):
    a = ""
    for i in range(_sage_const_128 ):
        a += str(m[_sage_const_0 , i])
    a = [a[i:i+_sage_const_8 ] for i in range(_sage_const_0 , _sage_const_128 , _sage_const_8 )]
    a = [int(i, _sage_const_2 ) for i in a]
    return bytes(a)

I = identity_matrix(GF(_sage_const_2 ), _sage_const_8 )
X = Matrix(GF(_sage_const_2 ), _sage_const_8 , _sage_const_8 )
for i in range(_sage_const_7 ):
    X[i, i+_sage_const_1 ] = _sage_const_1 
X[_sage_const_3 , _sage_const_0 ] = _sage_const_1 
X[_sage_const_4 , _sage_const_0 ] = _sage_const_1 
X[_sage_const_6 , _sage_const_0 ] = _sage_const_1 
X[_sage_const_7 , _sage_const_0 ] = _sage_const_1 

C = block_matrix([
    [X, X+I, I, I],
    [I, X, X+I, I],
    [I, I, X, X+I],
    [X+I, I, I, X]
])

zeros = Matrix(GF(_sage_const_2 ), _sage_const_8 , _sage_const_8 )
zeros2 = Matrix(GF(_sage_const_2 ), _sage_const_32 , _sage_const_32 )
o0 = block_matrix([
    [I, zeros, zeros, zeros],
    [zeros, zeros, zeros, zeros],
    [zeros, zeros, zeros, zeros],
    [zeros, zeros, zeros, zeros]
])

o1 = block_matrix([
    [zeros, zeros, zeros, zeros],
    [zeros, I, zeros, zeros],
    [zeros, zeros, zeros, zeros],
    [zeros, zeros, zeros, zeros]
])

o2 = block_matrix([
    [zeros, zeros, zeros, zeros],
    [zeros, zeros, zeros, zeros],
    [zeros, zeros, I, zeros],
    [zeros, zeros, zeros, zeros]
])

o3 = block_matrix([
    [zeros, zeros, zeros, zeros],
    [zeros, zeros, zeros, zeros],
    [zeros, zeros, zeros, zeros],
    [zeros, zeros, zeros, I]
])

S = block_matrix([
    [o0, o1, o2, o3],
    [o3, o0, o1, o2],
    [o2, o3, o0, o1],
    [o1, o2, o3, o0]
])

M = block_matrix([
    [C, zeros2, zeros2, zeros2],
    [zeros2, C, zeros2, zeros2],
    [zeros2, zeros2, C, zeros2],
    [zeros2, zeros2, zeros2, C]
])

R = M*S
A = S*(R**_sage_const_9 ) # sorry for the inconsistency in the variable name, this is supposed to be SA^9 that I talked about

key = os.urandom(_sage_const_16 )
c = AES(key)
c._sub_bytes = do_nothing
p = b"Very secret text"
ct = c.encrypt(p)
p2 = b"Known plaintextt"
ct2 = c.encrypt(p2)

p2 = bytes2mat(p2).transpose()
ct2 = bytes2mat(ct2).transpose()

K = ct2 - A*p2
recovered_plaintext = mat2bytes((A.inverse() * (bytes2mat(ct).transpose() - K)).transpose())
print(recovered_plaintext)

r = process(["python3", "server.py"])

r.recvuntil(b"flag: ")

enc_flag = bytes.fromhex(r.recvuntil(b".", drop=True).decode())

def encrypt(opt, subopt, msg=b""):
    payload = opt + b" " + subopt + b" " + msg.hex().encode()
    r.sendlineafter(b"> ", payload)
    result = bytes.fromhex(r.recvline(_sage_const_0 ).decode())
    return result


# stage 1
c1 = encrypt(b"sb", b"data", b"a"*_sage_const_16 )
c2 = encrypt(b"sb", b"secret")
print(c1)
print(c2)

c1 = bytes2mat(c1).transpose()
p1 = bytes2mat(b"a"*_sage_const_16 ).transpose()

K = c1 - A*p1
recovered_key = mat2bytes((A.inverse() * (bytes2mat(c2).transpose() - K)).transpose())
print(recovered_key)
key_1 = b""
for i in range(_sage_const_0 , len(recovered_key), _sage_const_4 ):
    key_1 += bytes([recovered_key[i]])
print(key_1)


# stage 2
mapping_no_shift_rows = dict()
for i in range(_sage_const_0 , _sage_const_256 , _sage_const_4 ):
    payload = bytes([_sage_const_30 ])*_sage_const_4  + bytes([_sage_const_30 ])*_sage_const_4  + bytes([i+_sage_const_2 ])*_sage_const_4  + bytes([i+_sage_const_3 ])*_sage_const_4  
    hasil = encrypt(b"sr", b"data", payload)
    print(hasil[:_sage_const_8 ])

print(len(mapping_no_shift_rows))
print(mapping_no_shift_rows)

c2 = encrypt(b"sr", b"secret")
c2 = [c2[i:i+_sage_const_4 ] for i in range(_sage_const_0 , len(c2), _sage_const_4 )]
print(c2)
recovered_key = b""
for c in c2:
    print(c in mapping_no_shift_rows)
# print(recovered_key)    


r.interactive()

