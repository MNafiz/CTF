

# This file was *autogenerated* from the file solver.sage
from sage.all_cmdline import *   # import sage library

_sage_const_29004754752602891845701088578222561842513874918199800431567395933687795651470110377063745715224303592560274634075790412592313062222984678812372502446455553874025887805048706501835504141010199497560376154063288969798733730977056261626071788261554096303337042690996275614463889111101331868052859671922570628337639260391486134758084403718297925958046876883450312203509912864798807966117003174457393430905875449096266440351779141369905085213013783089319684239294684146737340793537160633379849038762741682795276911283424980467314859075820283929128473248792350786471543057922435616411342493331051424182347254472208007118691 = Integer(29004754752602891845701088578222561842513874918199800431567395933687795651470110377063745715224303592560274634075790412592313062222984678812372502446455553874025887805048706501835504141010199497560376154063288969798733730977056261626071788261554096303337042690996275614463889111101331868052859671922570628337639260391486134758084403718297925958046876883450312203509912864798807966117003174457393430905875449096266440351779141369905085213013783089319684239294684146737340793537160633379849038762741682795276911283424980467314859075820283929128473248792350786471543057922435616411342493331051424182347254472208007118691); _sage_const_29353585191166156442189968012744774060523695365304588409452746298446966090446842013875144703842901644120084459742264199601712574341648935494662522676662195240580196375882847987434122422257670543787177894139225539012913211123707515022561081594248680970805167931112717636527712860774929806451263605673800306509371173663128670975257217464868471515902953618301217178231352288283127976806763613672091333537163342358371199303987661809368689697952949595308131881547519088258353529773216590952608452869230534334146785053625093426887703186355237207342461913924093535411997384080910520555094397726389504592515273009631000424191 = Integer(29353585191166156442189968012744774060523695365304588409452746298446966090446842013875144703842901644120084459742264199601712574341648935494662522676662195240580196375882847987434122422257670543787177894139225539012913211123707515022561081594248680970805167931112717636527712860774929806451263605673800306509371173663128670975257217464868471515902953618301217178231352288283127976806763613672091333537163342358371199303987661809368689697952949595308131881547519088258353529773216590952608452869230534334146785053625093426887703186355237207342461913924093535411997384080910520555094397726389504592515273009631000424191); _sage_const_65537 = Integer(65537); _sage_const_45076 = Integer(45076); _sage_const_36169 = Integer(36169); _sage_const_27950 = Integer(27950); _sage_const_3563 = Integer(3563); _sage_const_58188 = Integer(58188); _sage_const_12614 = Integer(12614); _sage_const_34400 = Integer(34400); _sage_const_51608 = Integer(51608); _sage_const_49317 = Integer(49317); _sage_const_7186 = Integer(7186); _sage_const_29518 = Integer(29518); _sage_const_8535 = Integer(8535); _sage_const_56393 = Integer(56393); _sage_const_40272 = Integer(40272); _sage_const_39843 = Integer(39843); _sage_const_23648 = Integer(23648); _sage_const_26140 = Integer(26140); _sage_const_28698 = Integer(28698); _sage_const_15925 = Integer(15925); _sage_const_38759 = Integer(38759); _sage_const_40734 = Integer(40734); _sage_const_63262 = Integer(63262); _sage_const_38472 = Integer(38472); _sage_const_32529 = Integer(32529); _sage_const_47175 = Integer(47175); _sage_const_21167 = Integer(21167); _sage_const_7210 = Integer(7210); _sage_const_186 = Integer(186); _sage_const_18613 = Integer(18613); _sage_const_17886 = Integer(17886); _sage_const_16089 = Integer(16089); _sage_const_4581 = Integer(4581); _sage_const_28636 = Integer(28636); _sage_const_51482 = Integer(51482); _sage_const_52145 = Integer(52145); _sage_const_4195 = Integer(4195); _sage_const_44626 = Integer(44626); _sage_const_58924 = Integer(58924); _sage_const_1648 = Integer(1648); _sage_const_16919 = Integer(16919); _sage_const_40502 = Integer(40502); _sage_const_35057 = Integer(35057); _sage_const_34613 = Integer(34613); _sage_const_64918 = Integer(64918); _sage_const_11281 = Integer(11281); _sage_const_41851 = Integer(41851); _sage_const_14937 = Integer(14937); _sage_const_53613 = Integer(53613); _sage_const_7916 = Integer(7916); _sage_const_58724 = Integer(58724); _sage_const_35363 = Integer(35363); _sage_const_19206 = Integer(19206); _sage_const_46857 = Integer(46857); _sage_const_10047 = Integer(10047); _sage_const_18314 = Integer(18314); _sage_const_31238 = Integer(31238); _sage_const_15372 = Integer(15372); _sage_const_64765 = Integer(64765); _sage_const_14671 = Integer(14671); _sage_const_16685 = Integer(16685); _sage_const_16698 = Integer(16698); _sage_const_34390 = Integer(34390); _sage_const_41472 = Integer(41472); _sage_const_2 = Integer(2); _sage_const_16 = Integer(16); _sage_const_81 = Integer(81); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1)
from sage.all import *
from Crypto.Util.number import *


enc = _sage_const_29004754752602891845701088578222561842513874918199800431567395933687795651470110377063745715224303592560274634075790412592313062222984678812372502446455553874025887805048706501835504141010199497560376154063288969798733730977056261626071788261554096303337042690996275614463889111101331868052859671922570628337639260391486134758084403718297925958046876883450312203509912864798807966117003174457393430905875449096266440351779141369905085213013783089319684239294684146737340793537160633379849038762741682795276911283424980467314859075820283929128473248792350786471543057922435616411342493331051424182347254472208007118691 
n = _sage_const_29353585191166156442189968012744774060523695365304588409452746298446966090446842013875144703842901644120084459742264199601712574341648935494662522676662195240580196375882847987434122422257670543787177894139225539012913211123707515022561081594248680970805167931112717636527712860774929806451263605673800306509371173663128670975257217464868471515902953618301217178231352288283127976806763613672091333537163342358371199303987661809368689697952949595308131881547519088258353529773216590952608452869230534334146785053625093426887703186355237207342461913924093535411997384080910520555094397726389504592515273009631000424191 
e = _sage_const_65537 
leaked_p =[_sage_const_45076 , _sage_const_36169 , _sage_const_27950 , _sage_const_3563 , _sage_const_58188 , _sage_const_12614 , _sage_const_34400 , _sage_const_51608 , _sage_const_49317 , _sage_const_7186 , _sage_const_29518 , _sage_const_8535 , _sage_const_56393 , _sage_const_40272 , _sage_const_39843 , _sage_const_23648 , _sage_const_26140 , _sage_const_28698 , _sage_const_15925 , _sage_const_38759 , _sage_const_40734 , _sage_const_63262 , _sage_const_38472 , _sage_const_32529 , _sage_const_47175 , _sage_const_21167 , _sage_const_7210 , _sage_const_186 , _sage_const_18613 , _sage_const_17886 , _sage_const_16089 , _sage_const_4581 , _sage_const_28636 , _sage_const_51482 , _sage_const_52145 , _sage_const_4195 , _sage_const_44626 , _sage_const_58924 , _sage_const_1648 , _sage_const_16919 , _sage_const_40502 , _sage_const_35057 , _sage_const_34613 , _sage_const_64918 , _sage_const_11281 , _sage_const_41851 , _sage_const_14937 , _sage_const_53613 , _sage_const_7916 , _sage_const_58724 , _sage_const_35363 , _sage_const_19206 , _sage_const_46857 , _sage_const_10047 , _sage_const_18314 , _sage_const_31238 , _sage_const_15372 , _sage_const_64765 , _sage_const_14671 , _sage_const_16685 , _sage_const_16685 , _sage_const_16698 , _sage_const_34390 , _sage_const_41472 ]
key = _sage_const_16685 
p_partial = [bin(l^key)[_sage_const_2 :].zfill(_sage_const_16 ) for l in leaked_p]
p_partial = int("".join(p_partial),_sage_const_2 )

a = p_partial

X = _sage_const_2 **_sage_const_81 
M = matrix([[X**_sage_const_2 , _sage_const_2 *X*a, a**_sage_const_2 ], [_sage_const_0 , X, a], [_sage_const_0 , _sage_const_0 , n]])
B = M.LLL()

Q = B[_sage_const_0 ][_sage_const_0 ]*x**_sage_const_2 /X**_sage_const_2 +B[_sage_const_0 ][_sage_const_1 ]*x/X+B[_sage_const_0 ][_sage_const_2 ]
p = p_partial + Q.roots(ring=ZZ)[_sage_const_0 ][_sage_const_0 ]
q = n//p

phi = (p-_sage_const_1 )*(q-_sage_const_1 )
d = inverse(e,phi)
m = pow(enc,d,n)

print(bytes.fromhex(hex(m)[_sage_const_2 :]))

