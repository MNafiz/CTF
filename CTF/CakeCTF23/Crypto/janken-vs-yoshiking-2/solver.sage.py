

# This file was *autogenerated* from the file solver.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_100 = Integer(100); _sage_const_1 = Integer(1); _sage_const_3 = Integer(3)
from sage.all import *
from pwn import *
from Crypto.Util.number import *
from sympy import factorint
import math, libnum


NC = "nc crypto.2023.cakectf.com 10555".split()

context.log_level = "warning"

#r = remote(NC[1], NC[2])
r = process("./server.sage")
r.recvuntil(b"Here is p: ")
p = int(r.recvuntil(b",", drop=True))
Fp = GF(p)
r.recvuntil(b"M: ")
M = eval(r.recvline(_sage_const_0 ))
M = [M[i:i+_sage_const_5 ] for i in range(_sage_const_0 , len(M), _sage_const_5 )]
M = Matrix(Fp, M)
k = M.charpoly().splitting_field('x')
J, P = M.jordan_form(k, transformation=True)
base = Mod(J[_sage_const_0 ][_sage_const_0 ], p)


for i in range(_sage_const_100 ):
        print(i+_sage_const_1 )
        r.recvuntil(b"my commitment is=")
        Mr = eval(r.recvline(_sage_const_0 ))
        Mr = [Mr[i:i+_sage_const_5 ] for i in range(_sage_const_0 , len(Mr), _sage_const_5 )]
        Mr = Matrix(GF(p), Mr)
        target = Mod((~P * Mr * P)[_sage_const_0 ][_sage_const_0 ], p)
        ans = discrete_log(target, base) % _sage_const_3 
        if ans == _sage_const_0 :
            ans = _sage_const_3 
        r.sendlineafter(b": ", str(ans).encode())

r.interactive()

