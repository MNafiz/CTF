

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_16 = Integer(16); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0); _sage_const_3 = Integer(3)
from sage.all import *
from pwn import *
from hashlib import sha512

def h(m):
    return int(sha512(m.encode()).hexdigest(), _sage_const_16 )

magic_word = "cake_does_not_eat_cat"
hash_magic_word = h(magic_word)

NC = "nc crypto.2023.cakectf.com 10444".split()

r = remote(NC[_sage_const_1 ], NC[_sage_const_2 ])

r.recvuntil(b"= ")
p = int(r.recvline(_sage_const_0 ))
r.recvuntil(b"= ")
g = int(r.recvline(_sage_const_0 ))
r.recvuntil(b"= ")
w, v = eval(r.recvline(_sage_const_0 ))
print(w,v)

"""
a*w - b * v = m mod p -1
b*v = a*w - m mod p - 1
b = ((a*w) - m) vinv mod p - 1 
"""

a = _sage_const_3 
b = ((a * w) - hash_magic_word) * inverse_mod(v, p - _sage_const_1 ) % (p - _sage_const_1 )

s, t = pow(g, a, p), pow(g, b, p)

r.sendlineafter(b": ", b"V")
r.sendlineafter(b": ", magic_word.encode())
r.sendlineafter(b": ", str(s).encode())
r.sendlineafter(b": ", str(t).encode())

r.interactive()

