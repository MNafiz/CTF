from Crypto.Util.number import *
from Crypto.Util.Padding import unpad
from Crypto.Cipher import AES
from hashlib import sha256

def H(msg):
    return int.from_bytes(sha256(msg).digest(), 'big')


p = 2187927460624367866053138955407692648682473743053236246707558906253741042480006602164664427
q = (p - 1) // 2
g = 375559713231366027661456501312210678588547344177468345614581736759352578046940519482449005
y = 1485107098193369513854775432342726913250546508148678604594096036026212707003506931382110518
ms = (b'jctf{powered_by_caffeine}', b'jctf{totally_real_flag}')
sigs = [(584760320483109456978677291524162809623560744424005784846002481292183647634857441612413242, 43566017108108194938809536454030127793515021629016835721136006757000695802735201944729583), (584760320483109456978677291524162809623560744424005784846002481292183647634857441612413242, 587754055422977160798386807229397695762555861352726788417293238718373985110611538922057038)]  
c = '614585db552484e4c81c4168afa8582bd975bfadd5edc8a4d1bf744c29a7d84f30cde5fe4b37f736af3f09480bcb626a'
c = bytes.fromhex(c)


h1 = H(ms[0])
h2 = H(ms[1])

k = (h1 - h2) * inverse(sigs[0][1] - sigs[1][1], q) % q
x = (k * sigs[0][1] - h1) * inverse(sigs[0][0], q) % q

aes = AES.new(long_to_bytes(x)[:16], AES.MODE_CBC, b'\0'*16)
flag = unpad(aes.decrypt(c), 16).decode()

print(flag)
