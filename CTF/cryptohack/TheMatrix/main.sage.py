

# This file was *autogenerated* from the file main.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_50 = Integer(50); _sage_const_31337 = Integer(31337); _sage_const_8 = Integer(8)
from Crypto.Util.number import  long_to_bytes, inverse
from sage.all import *

P = _sage_const_2 
N = _sage_const_50 
E = _sage_const_31337 

FLAG = b'crypto{??????????????????????????}'

def bytes_to_binary(s):
    bin_str = ''.join(format(b, '08b') for b in s)
    bits = [int(c) for c in bin_str]
    return bits

def load_matrix(fname):
    data = open(fname, 'r').read().strip()
    rows = [list(map(int, row)) for row in data.splitlines()]
    return Matrix(GF(P), rows)

mat = load_matrix("flag_403b981c77d39217c20390c1729b15f0.enc")
mat2 = mat**inverse(E, mat.multiplicative_order())
flag = ""
for j in range(N):
    for i in range(N):
        flag += str(mat2[i, j])
for i in range(_sage_const_8 , len(flag), _sage_const_8 ):
    s = long_to_bytes(int(flag[:i], _sage_const_2 ))
    if b'}' in s:
        print(s)
        break

