

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_5 = Integer(5); _sage_const_1024 = Integer(1024)
from sage.all import *
from pwn import *
from Crypto.Util.number import *
import random
# from sympy.ntheory import discrete_log
from sympy.ntheory.factor_ import smoothness
from libnum import xgcd

NC = "nc 103.152.242.235 9784".split()

# r = remote(NC[1], NC[2])


r = process("./soal.py")
r = remote(NC[_sage_const_1 ], NC[_sage_const_2 ])

def goto(n):
    r.sendlineafter(b">> ", str(n).encode())

 
goto(_sage_const_3 )
exec(r.recvline(_sage_const_0 ))

goto(_sage_const_4 )
r.recvuntil(b"= ")
next_state1 = int(r.recvline(_sage_const_0 ))

goto(_sage_const_4 )
r.recvuntil(b"= ")
next_state2 = int(r.recvline(_sage_const_0 ))

goto(_sage_const_5 )
r.recvuntil(b"= ")
enc_flag = int(r.recvline(_sage_const_0 ))

goto(_sage_const_1 )
exec(r.recvline(_sage_const_0 ))
        
r.close()

print("selesai",a, m)

c = next_state2 - pow(a, next_state1, m)
c %= m

R = GF(m)
state_flag = discrete_log(R(next_state1 - c), R(a)) #R(next_state1 - c).log(R(a))
print(state_flag)
random.seed(state_flag)

flag = random.getrandbits(_sage_const_1024 ) ^ enc_flag
print(bytes.fromhex(hex(flag)[_sage_const_2 :]))

