

# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_20 = Integer(20); _sage_const_2 = Integer(2); _sage_const_128 = Integer(128); _sage_const_12 = Integer(12); _sage_const_10 = Integer(10); _sage_const_11 = Integer(11)
from sage.all import *
from Crypto.Util.number import *

with open("output.txt","r") as f:
    content = f.read()
    f.close()



list_content = content.split("\n")[:-_sage_const_1 ]
exec(list_content[_sage_const_0 ])
list_content = list_content[_sage_const_1 :]

list_e = []
list_c = []

for i in range(_sage_const_0 ,_sage_const_20 ,_sage_const_2 ):
    exec(list_content[i])
    exec(list_content[i+_sage_const_1 ])
    list_e.append(e)
    list_c.append(c)

scale_value = _sage_const_2 **_sage_const_128 
matrix = [[_sage_const_0  for i in range(_sage_const_12 )] for j in range(_sage_const_12 )]
for i in range(_sage_const_10 ):
    matrix[i][i] = scale_value
    matrix[i][-_sage_const_1 ] = list_e[i]
matrix[-_sage_const_1 ][-_sage_const_2 ] = _sage_const_1 
matrix[-_sage_const_1 ][-_sage_const_1 ] = -n

mat = Matrix(ZZ, matrix)
mat = mat.LLL()
for loop in range(_sage_const_11 ):
    res = list(mat[loop])[:-_sage_const_1 ]
    if res[-_sage_const_1 ] == _sage_const_1 :
        print("Ada")
    res = [i // scale_value for i in res]
    sum_ed = sum([i*j for i,j in zip(list_e,res)])

    list_m = [pow(list_c[i],res[i],n) for i in range(_sage_const_10 )]
    m_plain = _sage_const_1 
    for m in list_m:
        m_plain *= m
    m_plain %= n
    try:
        print(bytes.fromhex(hex(m)[_sage_const_2 :]))
        print(sum_ed)
    except:
        continue

